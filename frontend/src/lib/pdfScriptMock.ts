// Pre-authored speaking scripts per page for the demo PDF
// Returns fully formatted, deterministic scripts (no generation)

export function getMockPageScript(pageNumber: number): string | undefined {
  const map: Record<number, string> = {
    1: `안녕하세요. 오늘은 Emileo 프로젝트의 개요와 목표를 간단히 소개드리겠습니다. 저희 팀의 구성과 역할 분담, 그리고 이번 촬영의 범위를 먼저 안내드릴게요. 이번 발표에서 청중이 꼭 가져가셨으면 하는 핵심 메시지는 ‘발표 효율을 높이는 AI 보조’입니다. 이 메시지를 중심에 두고 전체 흐름을 함께 살펴보겠습니다.`,
    2: `먼저 문제 정의입니다. 많은 발표자분들이 시간 관리와 스크립트 준비에서 어려움을 겪고 계십니다. 슬라이드별로 포커스가 분산되다 보니 핵심 메시지가 흐려지고, 실제 사용자 인터뷰에서도 ‘시간 초과’와 ‘말의 반복’이 가장 큰 불편으로 지적되었습니다. 오늘은 이 Pain-point들을 어떻게 줄일 수 있을지 구체적으로 다루겠습니다.`,
    3: `이제 솔루션입니다. Emileo는 슬라이드 기반 대본 자동 생성과 시간 가이드를 통해 준비 과정의 효율을 높여줍니다. 연습, 기록, 리포트가 선순환을 이루도록 설계되어 있어서 발표 품질이 점진적으로 개선됩니다. 이를 통해 준비 시간은 줄이고, 메시지는 일관성 있게 유지하며, 시간 초과를 예방할 수 있습니다.`,
    4: `시스템 아키텍처를 간단히 보겠습니다. 프론트엔드는 React와 Vite를 사용하고 백엔드는 Kotlin과 Spring으로 구성했습니다. PDF 파싱부터 슬라이드 매핑, 스크립트 생성, 그리고 리포트까지의 파이프라인이 하나의 흐름으로 이어집니다. 각 단계는 데이터 플로우를 명확히 하면서도 보안과 확장성을 고려해 설계했습니다.`,
    5: `핵심 기능 데모로 대본 자동 작성을 보여드리겠습니다. ‘마법사’ 버튼을 누르면 슬라이드별 템플릿 스크립트가 즉시 생성되고, 생성된 대본은 바로 편집할 수 있습니다. 또한 각 슬라이드마다 개별 생성도 지원하며, 키워드와 문장 길이 가이드를 함께 제공해 발표 톤을 안정적으로 유지하도록 돕습니다.`,
    6: `연습 모드에서는 중앙 타이머, 상태바, 스크립트 표시 토글을 사용해 실제 발표처럼 리허설할 수 있습니다. 특히 타이머를 클릭하면 상태바가 숨겨지면서 타이머가 토글되는 상호작용으로, 집중도를 높이면서도 흐름을 방해하지 않게 했습니다. 연습 도중의 시간 기록은 슬라이드별로 자동 집계됩니다.`,
    7: `결과 리포트에서는 총 소요 시간과 목표 대비, 그리고 슬라이드별 시간 추이를 한눈에 볼 수 있습니다. 특히 가장 오래 발표한 슬라이드는 카드 뒤집기를 통해 대본 미리보기를 제공해 원인 점검이 쉽습니다. 또한 예상 질문 TOP5를 함께 제시하여 Q&A 준비까지 자연스럽게 이어지도록 설계했습니다.`,
    8: `성과를 가정 시나리오로 공유드리면, 테스트 사용자 기준 준비 시간이 평균 30% 감소했고, 발표 초과 시간은 60% 줄었으며, 내용 반복은 40% 낮아졌습니다. 이러한 개선은 팀, 수업, 사내 세미나 등 다양한 현장에서 적용 가능성이 높습니다.`,
    9: `마지막으로 로드맵입니다. 실제 대본 품질을 더 높이기 위해 프롬프트 최적화와 화자 톤 옵션을 준비하고 있습니다. 또한 API 기반 분석 리포트 자동화와 팀 단위 공유, 피드백 기능을 통해 협업 경험을 확장할 계획입니다. 이제 데모 안내와 함께 Q&A를 진행하겠습니다. 감사합니다.`,
  };
  return map[pageNumber];
}


